SQL> SET ECHO ON;
SQL> SET SERVEROUTPUT ON;
SQL> 
SQL> --Procedure to insert a new registration when transaction type is N
SQL> CREATE OR REPLACE PROCEDURE new_regis(student_i VARCHAR2, course_cod VARCHAR2, sectio VARCHAR2, semeste VARCHAR2, yea VARCHAR2, grad NUMBER)
  2  	IS
  3  	BEGIN
  4  		IF student_exist(student_i) = FALSE THEN
  5  			RAISE_APPLICATION_ERROR(-20001, 'Student does not exist');
  6  		END IF;
  7  		IF course_exist(course_cod) = FALSE THEN
  8  			RAISE_APPLICATION_ERROR(-20002, 'Course does not exist');
  9  		END IF;
 10  
 11  		update_class_section(course_cod, sectio, semeste, yea, 1);
 12  
 13  		IF new_regis_student_exists(student_i, course_cod, sectio, semeste, yea) = FALSE THEN
 14  			RAISE_APPLICATION_ERROR(-20003, 'Student does not exist in course registration.');
 15  		ELSE
 16  			IF grade_check(student_i, course_cod, sectio, semeste, yea) = FALSE THEN
 17  				RAISE_APPLICATION_ERROR(-20004, 'Student already has a grade.');
 18  			ELSE
 19  				delete_from_crs_reg(student_i, course_cod, sectio, semeste, yea);
 20  				update_class_section(course_cod, sectio, semeste, yea, -1);
 21  				add_crs_reg(student_i, course_cod, sectio, semeste, yea, grad);
 22  				update_class_section(course_cod, sectio, semeste, yea, 1);
 23  			END IF;
 24  		END IF;
 25  	END;
 26  	/

Procedure created.

SQL> 
SQL> --Procedure to update grade when transaction type is UG
SQL> CREATE OR REPLACE PROCEDURE update_grade(student_i VARCHAR2, course_cod VARCHAR2, sectio VARCHAR2, semeste VARCHAR2, yea VARCHAR2, grad NUMBER)
  2  	IS
  3  	BEGIN
  4  		IF new_regis_student_exists(student_i, course_cod, sectio, semeste, yea) = FALSE THEN
  5  			RAISE_APPLICATION_ERROR(-20003, 'Student does not exist in course registration.');
  6  		ELSE
  7  			IF grade_check_new_reg(student_i, course_cod, sectio, semeste, yea) = FALSE THEN
  8  				RAISE_APPLICATION_ERROR(-20005, 'Student already has a grade.');
  9  			ELSE
 10  				update_crsReg_grade(student_i, course_cod, sectio, semeste, yea, grad);
 11  			END IF;
 12  		END IF;
 13  	END;
 14  	/

Procedure created.

SQL> 
SQL> --Procedure to delete a row when transaction type is D
SQL> CREATE OR REPLACE PROCEDURE delete_reg (student_i VARCHAR2, course_cod VARCHAR2, sectio VARCHAR2, semeste VARCHAR2, yea VARCHAR2, grad NUMBER)
  2  	IS
  3  	BEGIN
  4  		IF new_regis_student_exists(student_i, course_cod, sectio, semeste, yea) = FALSE THEN
  5  			RAISE_APPLICATION_ERROR(-20003, 'Student does not exist in course registration.');
  6  		ELSE
  7  			IF grade_check_new_reg(student_i, course_cod, sectio, semeste, yea) THEN
  8  				RAISE_APPLICATION_ERROR(-20005, 'Student has a grade.');
  9  			ELSE
 10  				delete_from_crs_reg(student_i, course_cod, sectio, semeste, yea);
 11  				update_class_section(course_cod, sectio, semeste, yea, -1);
 12  			END IF;
 13  		END IF;
 14  	END;
 15  	/

Procedure created.

SQL> 
SQL> --Function returns true/false depending on if the student exists
SQL> CREATE OR REPLACE FUNCTION student_exist (student_i VARCHAR2)
  2  	RETURN BOOLEAN
  3  	IS
  4  	lv_student_id student.student_id%TYPE;
  5  	BEGIN
  6  		SELECT student_id
  7  				INTO lv_student_id
  8  				FROM student
  9  				WHERE student_id = student_i;
 10  		RETURN TRUE;
 11  	EXCEPTION
 12  			WHEN NO_DATA_FOUND THEN
 13  				RETURN FALSE;
 14  	END;
 15  	/

Function created.

SQL> 
SQL> --Function returns true/false depending on if the student exists
SQL> CREATE OR REPLACE FUNCTION course_exist (course_cod VARCHAR2)
  2  	RETURN BOOLEAN
  3  	IS
  4  	lv_course_code course.course_code%TYPE;
  5  	BEGIN
  6  		SELECT course_code
  7  				INTO lv_course_code
  8  				FROM course
  9  				WHERE course_code = course_cod;
 10  		RETURN TRUE;
 11  	EXCEPTION
 12  			WHEN NO_DATA_FOUND THEN
 13  				RETURN FALSE;
 14  	END;
 15  	/

Function created.

SQL> 
SQL> --Procedure to update class section enrolment number
SQL> CREATE OR REPLACE PROCEDURE update_class_section (course_cod VARCHAR2, sectio VARCHAR2, semeste VARCHAR2, yea VARCHAR2, enrol NUMBER)
  2  	IS
  3  	lv_enrolment VARCHAR2(1):= enrol;
  4  	BEGIN
  5  		UPDATE class_section
  6  			SET enrolment = enrolment + lv_enrolment
  7  			WHERE course_code = course_cod
  8  			AND section_code = sectio
  9  			AND semester = semeste
 10  			AND year = yea;
 11  	END;
 12  	/

Procedure created.

SQL> 
SQL> --Function to check is the student exists in the course registration to update/delete
SQL> CREATE OR REPLACE FUNCTION new_regis_student_exists (student_i VARCHAR2, course_cod VARCHAR2, sectio VARCHAR2, semeste VARCHAR2, yea VARCHAR2)
  2  	RETURN BOOLEAN
  3  	IS
  4  	lv_student_id student.student_id%TYPE;
  5  	BEGIN
  6  		SELECT student_id
  7  				INTO lv_student_id
  8  				FROM course_registration
  9  				WHERE student_id = student_i
 10  				AND  course_code = course_cod
 11  				AND section = sectio
 12  				AND semester = semeste
 13  				AND year = yea;
 14  		RETURN TRUE;
 15  	EXCEPTION
 16  		WHEN NO_DATA_FOUND THEN
 17  				RETURN FALSE;
 18  	END;
 19  	/

Function created.

SQL> 
SQL> --Function returns true/false after checking if grade exists in the course registration table
SQL> CREATE OR REPLACE FUNCTION grade_check (student_i VARCHAR2, course_cod VARCHAR2, sectio VARCHAR2, semeste VARCHAR2, yea VARCHAR2)
  2  	RETURN BOOLEAN
  3  	IS
  4  	lv_grade NUMBER(3,0);
  5  	BEGIN
  6  		SELECT grade
  7  			INTO lv_grade
  8  			FROM course_registration
  9  			WHERE student_id = student_i
 10  				AND course_code = course_cod
 11  				AND section = sectio
 12  				AND semester = semeste
 13  				AND year = yea;
 14  			RETURN TRUE;
 15  	EXCEPTION
 16  			WHEN NO_DATA_FOUND THEN
 17  				RETURN FALSE;
 18  	END;
 19  	/

Function created.

SQL> 
SQL> --Procedure to remove a row from course registration
SQL> CREATE OR REPLACE PROCEDURE delete_from_crs_reg (student_i VARCHAR2, course_cod VARCHAR2, sectio VARCHAR2, semeste VARCHAR2, yea VARCHAR2)
  2  	IS
  3  	BEGIN
  4  		DELETE
  5  			FROM course_registration
  6  			WHERE student_id = student_i
  7  				AND  course_code = course_cod
  8  				AND section = sectio
  9  				AND semester = semeste
 10  				AND year = yea
 11  				AND grade = NULL;
 12  	END;
 13  	/

Procedure created.

SQL> 
SQL> --Procedure to insert a new row into the course registration table
SQL> CREATE OR REPLACE PROCEDURE add_crs_reg (student_i VARCHAR2, course_cod VARCHAR2, sectio VARCHAR2, semeste VARCHAR2, yea VARCHAR2, grad NUMBER)
  2  	IS
  3  	BEGIN
  4  		INSERT INTO course_registration (student_id, course_code, section, semester, year, grade)
  5  			VALUES(student_i, course_cod, sectio, semeste, yea, grad);
  6  	END;
  7  	/

Procedure created.

SQL> 
SQL> --Procedure that updates a grade in the course registration table
SQL> CREATE OR REPLACE PROCEDURE update_crsReg_grade(student_i VARCHAR2, course_cod VARCHAR2, sectio VARCHAR2, semeste VARCHAR2, yea VARCHAR2, grad NUMBER)
  2  	IS
  3  	BEGIN
  4  		UPDATE course_registration
  5  			SET grade = grad
  6  			WHERE student_id = student_i
  7  				AND  course_code = course_cod
  8  				AND section = sectio
  9  				AND semester = semeste
 10  				AND year = yea;
 11  	END;
 12  	/

Procedure created.

SQL> 
SQL> --Function that checks if the grade exists in the new registration table and returns true/flase depending
SQL> CREATE OR REPLACE FUNCTION grade_check_new_reg (student_i VARCHAR2, course_cod VARCHAR2, sectio VARCHAR2, semeste VARCHAR2, yea VARCHAR2)
  2  	RETURN BOOLEAN
  3  	IS
  4  	lv_grade NUMBER(3,0);
  5  	BEGIN
  6  		SELECT grade
  7  			INTO lv_grade
  8  			FROM new_registration
  9  			WHERE student_id = student_i
 10  				AND course_code = course_cod
 11  				AND section = sectio
 12  				AND semester = semeste
 13  				AND year = yea;
 14  			RETURN TRUE;
 15  	EXCEPTION
 16  			WHEN NO_DATA_FOUND THEN
 17  				RETURN FALSE;
 18  	END;
 19  	/

Function created.

SQL> 
SQL> CREATE OR REPLACE PROCEDURE update_error_log (student_i VARCHAR2, course_cod VARCHAR2, sectio VARCHAR2, semeste VARCHAR2, yea VARCHAR2, grad NUMBER, transaction_typ VARCHAR2, messag VARCHAR2)
  2  	IS
  3  	BEGIN
  4  		INSERT INTO error_log
  5  			VALUES(student_i, course_cod, sectio, semeste, yea, grad, transaction_typ, messag);
  6  	END;
  7  	/

Procedure created.

SQL> 
SQL> DECLARE
  2  CURSOR cur_reg IS
  3  	SELECT *
  4  		FROM new_registration;
  5  	v_message VARCHAR2(100);
  6  	lv_student_id new_registration.student_id%TYPE;
  7  	lv_course_code new_registration.course_code%TYPE;
  8  	lv_section new_registration.section%TYPE;
  9  	lv_semester new_registration.semester%TYPE;
 10  	lv_year new_registration.year%TYPE;
 11  	lv_grade new_registration.grade%TYPE;
 12  	lv_transaction_type new_registration.transaction_type%TYPE;
 13  BEGIN
 14  	FOR rec_reg IN cur_reg LOOP
 15  	lv_student_id := rec_reg.student_id;
 16  	lv_course_code := rec_reg.course_code;
 17  	lv_section := rec_reg.section;
 18  	lv_semester := rec_reg.semester;
 19  	lv_year := rec_reg.year;
 20  	lv_grade := rec_reg.grade;
 21  	lv_transaction_type := rec_reg.transaction_type;
 22  	BEGIN
 23  		IF rec_reg.transaction_type = 'N' THEN
 24  			new_regis(rec_reg.student_id, rec_reg.course_code, rec_reg.section, rec_reg.semester, rec_reg.year, rec_reg.grade);
 25  		ELSIF rec_reg.transaction_type = 'UG' THEN
 26  			update_grade(rec_reg.student_id, rec_reg.course_code, rec_reg.section, rec_reg.semester, rec_reg.year, rec_reg.grade);
 27  		ELSIF rec_reg.transaction_type = 'D' THEN
 28  			delete_reg(rec_reg.student_id, rec_reg.course_code, rec_reg.section, rec_reg.semester, rec_reg.year, rec_reg.grade);
 29  		ELSE
 30  			RAISE_APPLICATION_ERROR(-20006, 'Invalid transaction type');
 31  		END IF;
 32  		COMMIT;
 33  	END;
 34  	END LOOP;
 35  EXCEPTION
 36  	WHEN OTHERS THEN
 37  		v_message := SUBSTR(SQLERRM, 1, 100);
 38  		update_error_log(lv_student_id, lv_course_code, lv_section, lv_semester, lv_year, lv_grade, lv_transaction_type, v_message);
 39  END;
 40  /

PL/SQL procedure successfully completed.

SQL> 
SQL> SPOOL OFF;
